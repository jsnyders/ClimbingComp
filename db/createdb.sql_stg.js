/*
 * Template group createdb.sql
 * Compiled on Tue Oct 27 2015 22:09:34 GMT-0400 (EDT)
 */
var path = require("path");
var base = path.dirname(module.filename);

function getInstance(st, group) {
    "use strict";
var r;
var gFile = "createdb.sql"; 

group.name = "createdb.sql";





//
// Template /createdb
//
r = function(w, rc) {
    var g = this.owningGroup,
        s = this.scope;
    
    w.write("DROP DATABASE IF EXISTS ");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "database", { file: gFile, line: 29, column: 32 }));
    w.write(";");
    w.write("\n");
    w.write("CREATE DATABASE ");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "database", { file: gFile, line: 30, column: 24 }));
    w.write(" CHARACTER SET = utf8;");
    w.write("\n");
    w.write("DROP USER '");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "user", { file: gFile, line: 31, column: 19 }));
    w.write("'@'");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "host", { file: gFile, line: 31, column: 35 }));
    w.write("';");
    w.write("\n");
    w.write("CREATE USER '");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "user", { file: gFile, line: 32, column: 21 }));
    w.write("'@'");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "host", { file: gFile, line: 32, column: 37 }));
    w.write("' IDENTIFIED BY '");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "password", { file: gFile, line: 32, column: 67 }));
    w.write("';");
    w.write("\n");
    w.write("GRANT ALL ON ");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "database", { file: gFile, line: 33, column: 21 }));
    w.write(".* TO ");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "user", { file: gFile, line: 33, column: 44 }));
    w.write(";");
    w.write("\n");
    w.write("USE ");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "database", { file: gFile, line: 34, column: 12 }));
    w.write(";");
    w.write("\n");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS config;");
    w.write("\n");
    w.write("CREATE TABLE config (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("name VARCHAR(100) PRIMARY KEY,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("nvalue INTEGER,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("tvalue VARCHAR(1000)");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 41, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
    w.write("\n");
    w.write("-- the schema version");
    w.write("\n");
    w.write("INSERT INTO config VALUES('VersionMajor',0,NULL);");
    w.write("\n");
    w.write("INSERT INTO config VALUES('VersionMinor',1,NULL);");
    w.write("\n");
    w.write("-- default session timeout");
    w.write("\n");
    w.write("INSERT INTO config VALUES('SessionIdleTime',2 * 60 * 60,NULL); -- 2 hr");
    w.write("\n");
    w.write("INSERT INTO config VALUES('SessionMaxTime',8 * 60 * 60,NULL); -- 8 hr");
    w.write("\n");
    w.write("\n");
    w.write("-- CATEGORY RULES");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Youth-D', NULL, '(AGE <= 11)');");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Youth-C', NULL, '(AGE = 12 OR AGE = 13)');");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Youth-B', NULL, '(AGE = 14 OR AGE = 15)');");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Youth-A', NULL, '(AGE = 16 OR AGE = 17)');");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Junior', NULL, '(AGE = 18 OR AGE = 19)');");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Adult-Recreational', NULL, '(AGE >= 16)'); -- and ability <= V1/5.9");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Adult-Intermediate', NULL, '(AGE >= 16)'); -- and ability V2 to V3/5.9+ to 5.11");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Adult-Advanced', NULL, '(AGE >= 16)'); -- and ability >= V4/5.11+");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Open', NULL, '(AGE >= 16)');");
    w.write("\n");
    w.write("INSERT INTO config VALUES('CAT_RULE_Masters', NULL, '(AGE >= 45)');");
    w.write("\n");
    w.write("\n");
    w.write("-- name value pairs");
    w.write("\n");
    w.write("-- used to construct select list options");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS nvp;");
    w.write("\n");
    w.write("CREATE TABLE nvp (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("scope_id INTEGER,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("name VARCHAR(100) NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("seq INTEGER(4) NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("val VARCHAR(100) NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("label VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("alias VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("PRIMARY KEY id (scope_id, name, val)");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 73, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 10, 'Youth-D', 'Youth-D', 'D');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 20, 'Youth-C', 'Youth-C', 'C');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 30, 'Youth-B', 'Youth-B', 'B');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 40, 'Youth-A', 'Youth-A', 'A');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 50, 'Junior', 'Junior', 'Jr');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 60, 'Adult', 'Adult', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 70, 'Adult-Recreational', 'Adult-Recreational', 'Recreational');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 80, 'Adult-Intermediate', 'Adult-Intermediate', 'Intermediate');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 90, 'Adult-Advanced', 'Adult-Advanced', 'Advanced');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 100, 'Open', 'Open', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'CATEGORIES', 110, 'Masters', 'Masters', NULL);");
    w.write("\n");
    w.write("-- TODO need to be able to define rules typically based on age/birth date for membership in category");
    w.write("\n");
    w.write("-- but the rules can also be based on performance. For example from the USAC rules:");
    w.write("\n");
    w.write("-- “For those competitors who register to compete in either Recreational, Intermediate or Advanced, please know that you");
    w.write("\n");
    w.write("-- may attempt any problem at the competitions for your top 5 problems. If, however, you complete 3 or more problems in ");
    w.write("\n");
    w.write("-- the category above the one in which you registered (or 1 problem in two divisions above your registered category) ");
    w.write("\n");
    w.write("-- you will be automatically bumped to the next category.”");
    w.write("\n");
    w.write("\n");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  10, '101-Puget Sound', '101-Puget Sound', '101');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  20, '102-Cascadia', '102-Cascadia', '102');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  30, '201-Northern CA', '201-Northern CA', '201');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  40, '202-Southern CA', '202-Southern CA', '202');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  50, '301-Mountain West', '301-Mountain West', '301');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  60, '302-Front Range', '302-Front Range', '302');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  70, '401-The Desert', '401-The Desert', '401');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  80, '402-South Central', '402-South Central', '402');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS',  90, '501-Midwest', '501-Midwest', '501');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS', 110, '502-Great Lakes', '502-Great Lakes', '502');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS', 120, '601-Southeast', '601-Southeast', '601');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS', 130, '602-Midsouth', '602-Midsouth', '602');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS', 140, '701-Capital', '701-Capital', '701');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS', 150, '702-Rustbelt', '702-Rustbelt', '702');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS', 160, '801-New England West', '801-New England West', '801');");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'REGIONS', 170, '802-New England East', '802-New England East', '802');");
    w.write("\n");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SERIES', 10, 'SCS', 'SCS', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SERIES', 20, 'ABS', 'ABS', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SERIES', 30, 'CCS', 'CCS', NULL);");
    w.write("\n");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SANCTIONING', 10, 'Local', 'Local', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SANCTIONING', 20, 'Regional', 'Regional', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SANCTIONING', 30, 'Divisional', 'Divisional', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SANCTIONING', 40, 'National', 'National', NULL);");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'SANCTIONING', 50, 'None', 'None', NULL);");
    w.write("\n");
    w.write("\n");
    w.write("INSERT INTO nvp VALUES(-1, 'FORMAT', 10, 'Redpoint', 'Redpoint', NULL);");
    w.write("\n");
    w.write("--INSERT INTO nvp VALUES(-1, 'FORMAT', 20, 'Redpoint Modified', 'Redpoint Modified', NULL);");
    w.write("\n");
    w.write("--INSERT INTO nvp VALUES(-1, 'FORMAT', 30, 'Flash', 'Flash', NULL);");
    w.write("\n");
    w.write("--INSERT INTO nvp VALUES(-1, 'FORMAT', 40, 'Onsight', 'Onsight', NULL);");
    w.write("\n");
    w.write("--INSERT INTO nvp VALUES(-1, 'FORMAT', 50, 'Speed', 'Speed', NULL);");
    w.write("\n");
    w.write("\n");
    w.write("-- A comp (CSS for example) may include sport, bouldering and speed. Consider these distinct events. Makes sense ");
    w.write("\n");
    w.write("--  because they can have different climbers for each type/format");
    w.write("\n");
    w.write("-- The heist even mixes bouldering and lead climbing ");
    w.write("\n");
    w.write("\n");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS event;");
    w.write("\n");
    w.write("CREATE TABLE event (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("version INTEGER DEFAULT 1,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("region VARCHAR(100), -- REGIONS");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("location VARCHAR(200) NOT NULL, -- Example 'Boston Rock Gym'");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("event_date DATE NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("series VARCHAR(100), -- SERIES");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("sanctioning VARCHAR(100) NOT NULL, -- SANCTIONING");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("state ENUM('Internal', 'Open', 'Active', 'Preliminary', 'Closed') NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("current_round INTEGER(1),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("bib_number_digits INTEGER(1) NOT NULL DEFAULT 3,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("record_falls_per_climb BOOLEAN NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("routes_have_location BOOLEAN NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("routes_have_color BOOLEAN NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("num_rounds INTEGER(1) NOT NULL, -- must be >= 1 and <= 3");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_1_num_routes INTEGER, -- for redpoint this is number to consider for top score");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_1_format VARCHAR(100), -- FORMAT - this defines the method of scoring and ranking");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_1_num_advance INTEGER, -- how many people in each category advance to the next round");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_2_num_routes INTEGER,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_2_format VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_2_num_advance INTEGER, -- how many people in each category advance to the next round");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_3_num_routes INTEGER,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_3_format VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round_3_num_advance INTEGER, -- how many people in each category advance to the next competition");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("score_card_columns INTEGER DEFAULT 2,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("notes VARCHAR(1000),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("updated_by VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 161, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
    w.write("\n");
    w.write("CREATE TRIGGER event_update");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("BEFORE UPDATE ON event");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("FOR EACH ROW");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("      ");
    w.write("set NEW.version = NEW.version + 1;");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.write("-- This is used to populate initial default for newly created events");
    w.write("\n");
    w.write("INSERT INTO event (state, location, event_date, region, series, sanctioning,");
    w.write("\n");
    w.pushIndentation("                    ");
    w.write("num_rounds, round_1_num_routes, round_1_format, routes_have_location, routes_have_color,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("                    ");
    w.write("bib_number_digits, record_falls_per_climb, score_card_columns) ");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("VALUES ('Internal', 'DEFAULT', CURDATE(), '802-New England East', 'ABS', 'Local',");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("            ");
    w.write("1, 5, 'Redpoint', TRUE, TRUE, 3, FALSE, 2 );");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS climber;");
    w.write("\n");
    w.write("CREATE TABLE climber (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("version INTEGER DEFAULT 1,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("usac_member_id INTEGER, -- todo consider if this should be a string");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("first_name VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("last_name VARCHAR(100) NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("gender ENUM('Male', 'Female'),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("category VARCHAR(100), -- CATEGORIES");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("birth_date DATE,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("region VARCHAR(100), -- REGIONS");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("team VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("coach VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- TODO need to mark a climber as taking no space for the purpose of number of climbers advancing to next level ");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- TODO consider other things like phone number, email, location, has waver, Citizen, possibly general purpose columns");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("updated_by VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("UNIQUE INDEX usac_member_id_ndx (usac_member_id),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("INDEX name_ndx (first_name, last_name)");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 195, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
    w.write("\n");
    w.write("CREATE TRIGGER climber_update");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("BEFORE UPDATE ON climber");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("FOR EACH ROW");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("      ");
    w.write("set NEW.version = NEW.version + 1;");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS event_route;");
    w.write("\n");
    w.write("CREATE TABLE event_route (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("event_id INTEGER NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("round INTEGER(1) NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("number INTEGER(3) NOT NULL, -- to consider that for non read-point comps routes are designated like Q1, Q2..., SF1..., F1, F2... and are also specific to a category e.g. FYDQ1");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("color VARCHAR(20),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("location VARCHAR(20),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_category VARCHAR(20), -- For modified redpoint this is something like Advanced, Youth, or Open. For onsight/flash this is something like FYDQ1");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("points INTEGER NOT NULL, -- This is the points for a top");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- based on the points the route is associated with a category for the purpose of adult sub category assignment");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- or for a modified redpoint comp you can have different colored score cards so that competitors in a given category can only climb routes matching that category");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- time limit typically the same for all routes but the rules allow each route to have its own time limit");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("sheet_row INTEGER,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("sheet_column INTEGER,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- for onsight/flash each hold has a point value and there are some other things like bridges etc. There is also a picture of the route.");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("PRIMARY KEY id (event_id, round, number)");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 218, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS event_climber;");
    w.write("\n");
    w.write("CREATE TABLE event_climber (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("climber_id INTEGER NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("event_id INTEGER NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("bib_number INTEGER(4) NOT NULL, -- xxx usac bib number starts with F or M and then 4 digits can have F1010 and M1010");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- for adults they can enter a different category for the event subject to some age requirements");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- the adult category has flexible sub divisions: Recreational, Intermediate or Advanced");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- also other kinds of comps may define categories differently but there could still be value in using the master climber list");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("category VARCHAR(100), -- event category. CATEGORIES or event specific categories");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- score card category could be different from category typically assigned based on rules(category)");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("region VARCHAR(100), -- region at time of event");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("team VARCHAR(100), -- team at time of event");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("coach VARCHAR(100), -- coach at time of event");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("version INTEGER DEFAULT 1,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("start_order INTEGER, -- for onsight event types this is the initial running order of the climber unique within gender+category");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_1_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("-- xxx for each route redpoint needs attempts/falls, onsight needs top (1/0) and possibly ranking points");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_2_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_3_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_4_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_5_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_6_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_7_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_8_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_9_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_10_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_11_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_12_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_13_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_14_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_15_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("route_16_score DECIMAL(7,2),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("total_falls INTEGER,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("tie_breaker VARCHAR(200),  -- A string used to break ties. For redpoint it is additional climbs beyond the top n.");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("final_time  DECIMAL(5,2),  -- Time used to break ties in super finals. Time in seconds to 2 decimal places.");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("climbs VARCHAR(6000), -- data for the client use only");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("updated_by VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("scored_by VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("scored_on TIMESTAMP NULL DEFAULT NULL,");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("PRIMARY KEY id (climber_id, event_id),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("UNIQUE INDEX event_number (bib_number, event_id)");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 263, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
    w.write("\n");
    w.write("CREATE TRIGGER event_climber_update");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("BEFORE UPDATE ON event_climber");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("FOR EACH ROW");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("      ");
    w.write("set NEW.version = NEW.version + 1;");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.write("-- users and sessions");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS app_user;");
    w.write("\n");
    w.write("CREATE TABLE `app_user` (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("version INTEGER DEFAULT 1,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("username VARCHAR(100) NOT NULL, -- name of user (required and non empty)");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("pwd_hash VARCHAR(100) NOT NULL, -- one way encrypted value of password");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("role ENUM('Reader', 'Contributor', 'Admin') NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("first_name VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("last_name VARCHAR(100),");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("UNIQUE INDEX username_idx (username)");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 282, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
    w.write("\n");
    w.write("CREATE TRIGGER app_user_update");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("BEFORE UPDATE ON app_user");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("    ");
    w.write("FOR EACH ROW");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("      ");
    w.write("set NEW.version = NEW.version + 1;");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.write("-- Must have an initial default admin user");
    w.write("\n");
    w.write("INSERT INTO app_user (username, pwd_hash, role) VALUES ('admin', password('admin'), 'Admin');");
    w.write("\n");
    w.write("\n");
    w.write("DROP TABLE IF EXISTS app_session;");
    w.write("\n");
    w.write("CREATE TABLE `app_session` (");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("session_id VARCHAR(256) NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("accessed_on TIMESTAMP NULL DEFAULT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("username VARCHAR(100) NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.pushIndentation("  ");
    w.write("role ENUM('Reader', 'Contributor', 'Admin') NOT NULL,");
    w.popIndentation();
    w.write("\n");
    w.write("\n");
    w.pushIndentation("  ");
    w.write("UNIQUE INDEX session_idx (session_id)");
    w.popIndentation();
    w.write("\n");
    w.write(") ENGINE=");
    st.write(w, s, g, rc, st.prop(s, g, rc, s.config, "engine", { file: gFile, line: 302, column: 17 }));
    w.write(" DEFAULT CHARSET=utf8;");
    w.write("\n");
};
r.args = [
        { name: "config"     }
];
group.addTemplate("/createdb", r); 


return group;
}
getInstance.base = base;

module.exports = getInstance;