/*
-- createdb.sql
-- Create database for Climbing Comp web app
--
-- Copyright (c) 2014, 2015, John Snyders
--
-- ClimbingComp is free software: you can redistribute it and/or modify
-- it under the terms of the GNU Affero General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- ClimbingComp is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU Affero General Public License for more details.
--
-- You should have received a copy of the GNU Affero General Public License
-- along with ClimbingComp.  If not, see <http://www.gnu.org/licenses/>.
--

-- Use consistent text limits
-- Small user supplied name, property name or small string: 100
-- Large user supplied name: 200
-- File path: 1000
-- Description: 1000
*/

createdb(config) ::= <<
DROP DATABASE IF EXISTS $config.database$;
CREATE DATABASE $config.database$ CHARACTER SET = utf8;
DROP USER '$config.user$'@'$config.host$';
CREATE USER '$config.user$'@'$config.host$' IDENTIFIED BY '$config.password$';
GRANT ALL ON $config.database$.* TO $config.user$;
USE $config.database$;

DROP TABLE IF EXISTS config;
CREATE TABLE config (
  name VARCHAR(100) PRIMARY KEY,
  nvalue INTEGER,
  tvalue VARCHAR(1000)
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

-- the schema version
INSERT INTO config VALUES('VersionMajor',0,NULL);
INSERT INTO config VALUES('VersionMinor',1,NULL);
-- default session timeout
INSERT INTO config VALUES('SessionIdleTime',2 * 60 * 60,NULL); -- 2 hr
INSERT INTO config VALUES('SessionMaxTime',8 * 60 * 60,NULL); -- 8 hr

-- CATEGORY RULES
INSERT INTO config VALUES('CAT_RULE_Youth-D', NULL, '(AGE <= 11)');
INSERT INTO config VALUES('CAT_RULE_Youth-C', NULL, '(AGE = 12 OR AGE = 13)');
INSERT INTO config VALUES('CAT_RULE_Youth-B', NULL, '(AGE = 14 OR AGE = 15)');
INSERT INTO config VALUES('CAT_RULE_Youth-A', NULL, '(AGE = 16 OR AGE = 17)');
INSERT INTO config VALUES('CAT_RULE_Junior', NULL, '(AGE = 18 OR AGE = 19)');
INSERT INTO config VALUES('CAT_RULE_Adult-Recreational', NULL, '(AGE >= 16)'); -- and ability <= V1/5.9
INSERT INTO config VALUES('CAT_RULE_Adult-Intermediate', NULL, '(AGE >= 16)'); -- and ability V2 to V3/5.9+ to 5.11
INSERT INTO config VALUES('CAT_RULE_Adult-Advanced', NULL, '(AGE >= 16)'); -- and ability >= V4/5.11+
INSERT INTO config VALUES('CAT_RULE_Open', NULL, '(AGE >= 16)');
INSERT INTO config VALUES('CAT_RULE_Masters', NULL, '(AGE >= 45)');

-- name value pairs
-- used to construct select list options
DROP TABLE IF EXISTS nvp;
CREATE TABLE nvp (
  scope_id INTEGER,
  name VARCHAR(100) NOT NULL,
  val VARCHAR(100) NOT NULL,
  label VARCHAR(100),
  alias VARCHAR(100),
  PRIMARY KEY id (scope_id, name, val)
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Youth-D', 'Youth-D', 'D');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Youth-C', 'Youth-C', 'C');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Youth-B', 'Youth-B', 'B');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Youth-A', 'Youth-A', 'A');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Junior', 'Junior', 'Jr');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Adult', 'Adult', NULL);
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Adult-Recreational', 'Adult-Recreational', 'Recreational');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Adult-Intermediate', 'Adult-Intermediate', 'Intermediate');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Adult-Advanced', 'Adult-Advanced', 'Advanced');
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Open', 'Open', NULL);
INSERT INTO nvp VALUES(-1, 'CATEGORIES', 'Masters', 'Masters', NULL);
-- TODO need to be able to define rules typically based on age/birth date for membership in category
-- but the rules can also be based on performance. For example from the USAC rules:
-- “For those competitors who register to compete in either Recreational, Intermediate or Advanced, please know that you
-- may attempt any problem at the competitions for your top 5 problems. If, however, you complete 3 or more problems in 
-- the category above the one in which you registered (or 1 problem in two divisions above your registered category) 
-- you will be automatically bumped to the next category.”


INSERT INTO nvp VALUES(-1, 'REGIONS', '101-Puget Sound', '101-Puget Sound', '101');
INSERT INTO nvp VALUES(-1, 'REGIONS', '102-Cascadia', '102-Cascadia', '102');
INSERT INTO nvp VALUES(-1, 'REGIONS', '201-Northern CA', '201-Northern CA', '201');
INSERT INTO nvp VALUES(-1, 'REGIONS', '202-Southern CA', '202-Southern CA', '202');
INSERT INTO nvp VALUES(-1, 'REGIONS', '301-Mountain West', '301-Mountain West', '301');
INSERT INTO nvp VALUES(-1, 'REGIONS', '302-Front Range', '302-Front Range', '302');
INSERT INTO nvp VALUES(-1, 'REGIONS', '401-The Desert', '401-The Desert', '401');
INSERT INTO nvp VALUES(-1, 'REGIONS', '402-South Central', '402-South Central', '402');
INSERT INTO nvp VALUES(-1, 'REGIONS', '501-Midwest', '501-Midwest', '501');
INSERT INTO nvp VALUES(-1, 'REGIONS', '502-Great Lakes', '502-Great Lakes', '502');
INSERT INTO nvp VALUES(-1, 'REGIONS', '601-Southeast', '601-Southeast', '601');
INSERT INTO nvp VALUES(-1, 'REGIONS', '602-Midsouth', '602-Midsouth', '602');
INSERT INTO nvp VALUES(-1, 'REGIONS', '701-Capital', '701-Capital', '701');
INSERT INTO nvp VALUES(-1, 'REGIONS', '702-Rustbelt', '702-Rustbelt', '702');
INSERT INTO nvp VALUES(-1, 'REGIONS', '801-New England West', '801-New England West', '801');
INSERT INTO nvp VALUES(-1, 'REGIONS', '802-New England East', '802-New England East', '802');

INSERT INTO nvp VALUES(-1, 'SERIES', 'SCS', 'SCS', NULL);
INSERT INTO nvp VALUES(-1, 'SERIES', 'ABS', 'ABS', NULL);
INSERT INTO nvp VALUES(-1, 'SERIES', 'CCS', 'CCS', NULL);

INSERT INTO nvp VALUES(-1, 'SANCTIONING', 'Local', 'Local', NULL);
INSERT INTO nvp VALUES(-1, 'SANCTIONING', 'Regional', 'Regional', NULL);
INSERT INTO nvp VALUES(-1, 'SANCTIONING', 'Divisional', 'Divisional', NULL);
INSERT INTO nvp VALUES(-1, 'SANCTIONING', 'National', 'National', NULL);
INSERT INTO nvp VALUES(-1, 'SANCTIONING', 'None', 'None', NULL);

INSERT INTO nvp VALUES(-1, 'FORMAT', 'Red Point', 'Red Point', NULL);
INSERT INTO nvp VALUES(-1, 'FORMAT', 'Red Point Modified', 'Red Point Modified', NULL);
--INSERT INTO nvp VALUES(-1, 'FORMAT', 'Flash', 'Flash', NULL);
--INSERT INTO nvp VALUES(-1, 'FORMAT', 'Onsight', 'Onsight', NULL);
--INSERT INTO nvp VALUES(-1, 'FORMAT', 'Speed', 'Speed', NULL);

-- A comp (CSS for example) may include sport, bouldering and speed. Consider these distinct events. Makes sense 
--  because they can have different climbers for each type/format
-- The heist even mixes bouldering and lead climbing 


DROP TABLE IF EXISTS event;
CREATE TABLE event (
  id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
  version INTEGER DEFAULT 1,
  region VARCHAR(100), -- REGIONS
  location VARCHAR(200) NOT NULL, -- Example 'Boston Rock Gym'
  event_date DATE NOT NULL,
  series VARCHAR(100), -- SERIES
  sanctioning VARCHAR(100) NOT NULL, -- SANCTIONING
  state ENUM('Internal', 'Open', 'Active', 'Preliminary', 'Closed') NOT NULL,
  current_round INTEGER(1),
  bib_number_digits INTEGER(1) NOT NULL DEFAULT 3,
  record_falls_per_climb BOOLEAN NOT NULL,
  routes_have_location BOOLEAN NOT NULL,
  routes_have_color BOOLEAN NOT NULL,
  num_rounds INTEGER(1) NOT NULL, -- must be >= 1 and <= 3
  round_1_num_routes INTEGER, -- for redpoint this is number to consider for top score
  round_1_format VARCHAR(100), -- FORMAT - this defines the method of scoring and ranking
  round_1_num_advance INTEGER, -- how many people in each category advance to the next round
  round_2_num_routes INTEGER,
  round_2_format VARCHAR(100),
  round_2_num_advance INTEGER, -- how many people in each category advance to the next round
  round_3_num_routes INTEGER,
  round_3_format VARCHAR(100),
  round_3_num_advance INTEGER, -- how many people in each category advance to the next competition
  score_card_columns INTEGER DEFAULT 2,
  notes VARCHAR(1000),
  updated_by VARCHAR(100),
  updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

CREATE TRIGGER event_update
  BEFORE UPDATE ON event
    FOR EACH ROW
      set NEW.version = NEW.version + 1;

-- This is used to populate initial default for newly created events
INSERT INTO event (state, location, event_date, region, series, sanctioning,
                    num_rounds, round_1_num_routes, round_1_format, routes_have_location, routes_have_color,
                    bib_number_digits, record_falls_per_climb, score_card_columns) 
    VALUES ('Internal', 'DEFAULT', CURDATE(), '802-New England East', 'ABS', 'Local',
            1, 5, 'Red Point', TRUE, TRUE, 3, FALSE, 2 );

DROP TABLE IF EXISTS climber;
CREATE TABLE climber (
  id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
  version INTEGER DEFAULT 1,
  usac_member_id INTEGER, -- todo consider if this should be a string
  first_name VARCHAR(100),
  last_name VARCHAR(100) NOT NULL,
  gender ENUM('Male', 'Female'),
  category VARCHAR(100), -- CATEGORIES
  birth_date DATE,
  region VARCHAR(100), -- REGIONS
  team VARCHAR(100),
  coach VARCHAR(100),
  -- TODO need to mark a climber as taking no space for the purpose of number of climbers advancing to next level 
  -- TODO consider other things like phone number, email, location, has waver, Citizen, possibly general purpose columns
  updated_by VARCHAR(100),
  updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

  UNIQUE INDEX usac_member_id_ndx (usac_member_id),
  INDEX name_ndx (first_name, last_name)
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

CREATE TRIGGER climber_update
  BEFORE UPDATE ON climber
    FOR EACH ROW
      set NEW.version = NEW.version + 1;

DROP TABLE IF EXISTS event_route;
CREATE TABLE event_route (
  event_id INTEGER NOT NULL,
  round INTEGER(1) NOT NULL,
  number INTEGER(3) NOT NULL, -- to consider that for non read-point comps routes are designated like Q1, Q2..., SF1..., F1, F2... and are also specific to a category e.g. FYDQ1
  color VARCHAR(20),
  location VARCHAR(20),
  route_category VARCHAR(20), -- For modified redpoint this is something like Advanced, Youth, or Open. For onsight/flash this is something like FYDQ1
  points INTEGER NOT NULL, -- This is the points for a top
  -- based on the points the route is associated with a category for the purpose of adult sub category assignment
  -- or for a modified red point comp you can have different colored score cards so that competitors in a given category can only climb routes matching that category
  -- time limit typically the same for all routes but the rules allow each route to have its own time limit
  sheet_row INTEGER,
  sheet_column INTEGER,
  -- for onsight/flash each hold has a point value and there are some other things like bridges etc. There is also a picture of the route.
  PRIMARY KEY id (event_id, round, number)
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS event_climber;
CREATE TABLE event_climber (
  climber_id INTEGER NOT NULL,
  event_id INTEGER NOT NULL,
  bib_number INTEGER(4) NOT NULL, -- xxx usac bib number starts with F or M and then 4 digits can have F1010 and M1010
  -- for adults they can enter a different category for the event subject to some age requirements
  -- the adult category has flexible sub divisions: Recreational, Intermediate or Advanced
  -- also other kinds of comps may define categories differently but there could still be value in using the master climber list
  category VARCHAR(100), -- event category. CATEGORIES or event specific categories
  -- score card category could be different from category typically assigned based on rules(category)
  region VARCHAR(100), -- region at time of event
  team VARCHAR(100), -- team at time of event
  coach VARCHAR(100), -- coach at time of event
  version INTEGER DEFAULT 1,
  start_order INTEGER, -- for onsight event types this is the initial running order of the climber unique within gender+category
  route_1_score DECIMAL(7,2),
  -- xxx for each route redpoint needs attempts/falls, onsight needs top (1/0) and possibly ranking points
  route_2_score DECIMAL(7,2),
  route_3_score DECIMAL(7,2),
  route_4_score DECIMAL(7,2),
  route_5_score DECIMAL(7,2),
  route_6_score DECIMAL(7,2),
  route_7_score DECIMAL(7,2),
  route_8_score DECIMAL(7,2),
  route_9_score DECIMAL(7,2),
  route_10_score DECIMAL(7,2),
  route_11_score DECIMAL(7,2),
  route_12_score DECIMAL(7,2),
  route_13_score DECIMAL(7,2),
  route_14_score DECIMAL(7,2),
  route_15_score DECIMAL(7,2),
  route_16_score DECIMAL(7,2),
  total_falls INTEGER,
  tie_breaker VARCHAR(200),  -- A string used to break ties. For red point it is additional climbs beyond the top n.
  final_time  DECIMAL(5,2),  -- Time used to break ties in super finals. Time in seconds to 2 decimal places.
  climbs VARCHAR(6000), -- data for the client use only
  updated_by VARCHAR(100),
  updated_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  scored_by VARCHAR(100),
  scored_on TIMESTAMP NULL DEFAULT NULL,

  PRIMARY KEY id (climber_id, event_id),
  UNIQUE INDEX event_number (bib_number, event_id)
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

CREATE TRIGGER event_climber_update
  BEFORE UPDATE ON event_climber
    FOR EACH ROW
      set NEW.version = NEW.version + 1;

-- users and sessions
DROP TABLE IF EXISTS app_user;
CREATE TABLE `app_user` (
  id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
  version INTEGER DEFAULT 1,
  username VARCHAR(100) NOT NULL, -- name of user (required and non empty)
  pwd_hash VARCHAR(100) NOT NULL, -- one way encrypted value of password
  role ENUM('Reader', 'Contributor', 'Admin') NOT NULL,
  first_name VARCHAR(100),
  last_name VARCHAR(100),

  UNIQUE INDEX username_idx (username)
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

CREATE TRIGGER app_user_update
  BEFORE UPDATE ON app_user
    FOR EACH ROW
      set NEW.version = NEW.version + 1;

-- Must have an initial default admin user
INSERT INTO app_user (username, pwd_hash, role) VALUES ('admin', password('admin'), 'Admin');

DROP TABLE IF EXISTS app_session;
CREATE TABLE `app_session` (
  id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
  session_id VARCHAR(256) NOT NULL,
  created_on TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  accessed_on TIMESTAMP NULL DEFAULT NULL,
  username VARCHAR(100) NOT NULL,
  role ENUM('Reader', 'Contributor', 'Admin') NOT NULL,

  UNIQUE INDEX session_idx (session_id)
) ENGINE=$config.engine$ DEFAULT CHARSET=utf8;

>>
